/*
 * Copyright 2013 University of Chicago and Argonne National Laboratory
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */

/*
  BLOB.H

  Binary Large OBjects

  The Tcl bindings for all this are generated by SWIG

  This file is documented with maint/doc.sh and is online here:
  http://swift-lang.github.io/swift-t/blob.html
*/

#pragma once

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

#include <mpi.h>

/** The M4 macro DOC CODE() (leave that space) allows us to extract
    C code into Asciidoc, this preprocessor macro simply passes it through.
*/
#define DOC_CODE(x) x

/**
   DOCN(`')
   DOCSECTION(Struct +turbine_blob+)

   DOCT(`
   Simple struct for variable-length data blob.

   This data type is represented by SWIG in Tcl as a regular pointer-
   you can pass it in and out of functions, display it, etc.
')
*/
DOC_CODE(
typedef struct
{
  void* pointer;
  int length;
} turbine_blob;
)

/**
   DOCT(`
   Based on this struct, SWIG will generate the following
   Tcl functions, assuming +blob+ is a +turbine_blob*+:
 ')

   DOCD(new_turbine_blob, Returns a fresh +turbine_blob*+.)
   DOCD(delete_turbine_blob blob, +free()+ the +blob+. Cf. +blobutils_destroy()+.)
   DOCD(turbine_blob_pointer_set blob p,
        `Set +blob->pointer=p+,  where +p+ is a +void*+.')
   DOCD(turbine_blob_pointer_get blob,
        `Returns +blob->pointer+, a +void*+.')
   DOCD(turbine_blob_length_set blob i,
        `Set +blob->pointer=i+, where +i+ is an integer.')
   DOCD(turbine_blob_length_get blob,
        `Returns +blob->length+, an +int+.')
*/

// DOCNN(== Functions)
// DOCNN(=== Pointers and sizes)
/* DOCNN(`Functions for +turbine_blob+ creation,
          memory allocation/deallocation,
          pointer arithmetic, and +sizeof()+.') */

/**
   DOCD(blobutils_create pointer length, Create a +turbine_blob+ from
   a long integer representing the pointer and the length.)
   @param pointer An int representation of a void*
 */
turbine_blob* blobutils_create(long pointer, int length);

/**
   DOCD(blobutils_create_ptr pointer length, Create a +turbine_blob+ from
   the pointer and the length.)
*/
turbine_blob* blobutils_create_ptr(void* pointer, int length);

/**
   DOCD(blobutils_malloc length, Allocate memory (not a blob) of given size.)
 */
void* blobutils_malloc(size_t bytes);

/**
   DOCD(blobutils_free pointer, Call +free()+ on the given pointer.)
 */
void blobutils_free(void* p);

/**
   DOCD(blobutils_destroy, Deallocate a blob _and_ frees the data pointer.)
 */
void blobutils_destroy(turbine_blob* blob);

/**
   DOCD(blobutils_ptr_add pointer offset, Return the result of
        adding offset to pointer.)
 */
void* blobutils_ptr_add(void* p, int offset);

/**
   DOCD(blobutils_sizeof_ptr, Obtain +sizeof(void*)+)
 */
int blobutils_sizeof_ptr(void);

/**
   DOCD(blobutils_sizeof_int, Obtain +sizeof(int)+)
 */
int blobutils_sizeof_int(void);

/**
   DOCD(blobutils_sizeof_int32, Obtain +sizeof(int32)+)
 */
int blobutils_sizeof_int32(void);

/**
   DOCD(blobutils_sizeof_float, Obtain +sizeof(double)+.
    (In Swift/T, all floats are 64-bit))
 */
int blobutils_sizeof_float(void);

// DOCNN(=== Casts)

/*
   DOCNN(`
   Cast functions for simple SWIG type transformations.
   Not all possible type pairs are yet implemented.
   In our naming scheme, if a type is not given, +void*+ is assumed.
   ')
 */

/** DOCD(blobutils_cast_to_ptr i, Integer to +void*+.) */
void* blobutils_cast_to_ptr(int i);
/** DOCD(blobutils_cast_lli_to_ptr i, Integer to +void*+.) */
void* blobutils_cast_lli_to_ptr(long long int i);
/** DOCD(blobutils_cast_int64_to_ptr i, Integer (64-bit) to +void*+.) */
void* blobutils_cast_int64_to_ptr(int64_t i);
/** DOCD(blobutils_cast_char_ptrptr_to_ptr p, +char**+ to +void*+.) */
void* blobutils_cast_char_ptrptr_to_ptr(char** p);

/** DOCD(blobutils_cast_to_ptrptr p, +void*+ to +void**+.) */
void** blobutils_cast_to_ptrptr(void* p);
/** DOCD(blobutils_cast_to_string p, +void*+ to +char**+.) */
char* blobutils_cast_to_string(void* p);
/** DOCD(blobutils_cast_to_char_ptrptr p, +void*+ to +char**+.) */
char** blobutils_cast_to_char_ptrptr(void* p);
/** DOCD(blobutils_cast_to_char_ppp p, +void*+ to +char***+.) */
char*** blobutils_cast_to_char_ppp(void* p);
/** DOCD(blobutils_cast_string_to_ptrptr s, +char*+ to +void*+.) */
void* blobutils_cast_string_to_ptr(char* s);

/** DOCD(blobutils_cast_to_int p, +void*+ to +int+.) */
int     blobutils_cast_to_int(void* p);
/** DOCD(blobutils_cast_to_long p, +void*+ to +long+.) */
long    blobutils_cast_to_long(void* p);
/** DOCD(blobutils_cast_to_lli p, +void*+ to +long long int+.) */
long long blobutils_cast_to_lli(void* p);
/** DOCD(blobutils_cast_to_int64 p, +void*+ to +int64_t+.) */
int64_t blobutils_cast_to_int64(void* p);

/** DOCD(blobutils_cast_int_to_int_ptr i, +int+ to +int*+.) */
      int*    blobutils_cast_int_to_int_ptr      (int i);
/** DOCD(blobutils_cast_int_to_const_int_ptr i, +int+ to +const int*+.) */
const int*    blobutils_cast_int_to_const_int_ptr(int i);
/** DOCD(blobutils_cast_int_to_dbl_ptr i, +int+ to +double*+.) */
      double* blobutils_cast_int_to_dbl_ptr      (int i);
/** DOCD(blobutils_cast_int_to_const_dbl_ptr i, +int+ to +const double*+.) */
const double* blobutils_cast_int_to_const_dbl_ptr(int i);

/** DOCD(blobutils_cast_long_to_int_ptr i, +long+ to +int*+.) */
      int*    blobutils_cast_long_to_int_ptr      (long l);
/** DOCD(blobutils_cast_long_to_const_int_ptr i, +long+ to +const int*+.) */
const int*    blobutils_cast_long_to_const_int_ptr(long l);
/** DOCD(blobutils_cast_long_to_dbl_ptr i, +long+ to +double*+.) */
      double* blobutils_cast_long_to_dbl_ptr      (long l);
/** DOCD(blobutils_cast_long_to_const_dbl_ptr i, +long+ to +const double*+.) */
const double* blobutils_cast_long_to_const_dbl_ptr(long l);

/** DOCD(blobutils_cast_to_int_ptr p, +void*+ to +int*+.) */
int* blobutils_cast_to_int_ptr(void* p);
/** DOCD(blobutils_cast_to_int64_ptr p, +void*+ to +int64_t*+.) */
int64_t* blobutils_cast_to_int64_ptr(void* p);
/** DOCD(blobutils_cast_to_int32_ptr p, +void*+ to +int32_t*+.) */
int32_t* blobutils_cast_to_int32_ptr(void* p);
/** DOCD(blobutils_cast_to_dbl_ptr p, +void*+ to +double*+.) */
double*  blobutils_cast_to_dbl_ptr(void* p);

// DOCNN(=== Array manipulation)
// DOCNN(These functions treat their inputs as arrays and do manipulation.)

/**
   DOCD(blobutils_zeroes_float p n,
        Set all +n+ entries of +double+ array +p+ to 0.0.)
 */
void blobutils_zeroes_float(double* p, int n);

/**
   DOCD(blobutils_get_ptr pointer index,
        `Assume blob is array of +void*+ - do array lookup.
         That is, return +pointer[index]+.')
 */
void* blobutils_get_ptr(void** pointer, int index);

/**
   DOCD(blobutils_set_ptr pointer index p,
   `Assume blob is array of +void*+ - do array store.
   That is, set +pointer[index]=p+.')
 */
void blobutils_set_ptr(void** pointer, int index, void* p);

/**
   DOCD(blobutils_get_float pointer index,
   `Assume blob is array of double- do array lookup.
    That is, return +pointer[index]+.')
 */
double blobutils_get_float(double* pointer, int index);

/**
  DOCD(blobutils_set_float p index d,
   `Assume blob is array of +double+ - do array store.
   That is, set +p[index]=d+.')
 */
void blobutils_set_float(double* p, int i, double d);

/**
  DOCD(blobutils_get_int pointer index,
   `Assume blob is array of +int+ - do array lookup.
    That is, return +pointer[index]+.')
 */
int blobutils_get_int(int* pointer, int index);

/**
  DOCD(blobutils_get_int32 pointer index,
   `Assume blob is array of +int32_t+ - do array lookup.
    That is, return +pointer[index]+.')
 */
int blobutils_get_int32(int32_t* pointer, int index);

/**
   DOCD(blobutils_set_int pointer index i,
   `Assume blob is array of +int+ - do array store.
    That is, set +pointer[index]=i+.')
 */
void blobutils_set_int(int* pointer, int index, int i);

/**
   Assume blob is array of char- do array lookup
 */
char blobutils_get_char(turbine_blob* blob, int index);

turbine_blob* blobutils_make_test(void);

// DOCNN(=== I/O)
// DOCNN(Blob I/O functions.)

/**
    DOCD(blobutils_write output blob,
        `Write blob +blob+ to file with name given in +output+.
        Returns +true+ on success, else +false+.')
 */
bool blobutils_write(const char* output, turbine_blob* blob);

/**
   DOCD(blobutils_read input blob,
        `Read blob +blob+ from file with name given in +output+.
        Returns +true+ on success, else +false+.')
 */
bool blobutils_read(const char* input, turbine_blob* blob);

/**
   Called by the user when using turbine_run() to return
   output data to the calling code
 */
void blobutils_turbine_run_output_blob(ptrdiff_t output,
                                       ptrdiff_t p, int length);

// DOCNN(=== String utilities)
// DOCNN(Functions for string operations.)

/**
   DOCD(blobutils_strdup s, Duplicate s.)
 */
void* blobutils_strdup(char* s);

// DOCNN(=== HDF utilities)
// DOCNN(Functions for HDF operations.)

/**
   DOCD(blobutils_hdf_write output dataset blob,
        `Write +blob+ to HDF file with name given in +output+
         in dataset +dataset+.
         Returns +true+ on success, else +false+.')
 */
bool blobutils_hdf_write(const char* output, const char* dataset,
                          turbine_blob* blob);

MPI_Comm turbine_get_task_comm(void);
