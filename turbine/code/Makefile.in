
TURBINE_VERSION = @TURBINE_VERSION@

ENABLE_SHARED = @ENABLE_SHARED@
ENABLE_STATIC = @ENABLE_STATIC@
ENABLE_STATIC_PKG = @ENABLE_STATIC_PKG@

CC = @CC@
CFLAGS := @CFLAGS@
LDFLAGS := @LDFLAGS@
CPPFLAGS := @CPPFLAGS@

# C++ is only used if R is enabled
CXX = @CXX@
CXXFLAGS = -g -Wall -O1 -fPIC

# LD is used to link *.so
# It is CC unless we need CXX
LD = @LD@

# Separate different types of CFLAGS
INCLUDES :=
DEFINES  :=

PACKAGE = lib/pkgIndex.tcl

# Components of enabled Tcl packages (libraries, index files, etc)
PACKAGE_ARTIFACTS :=

BUILD_ALL_TARGETS = libs $(TURBINE_EXECUTABLES)

ifeq ($(ENABLE_SHARED),1)
  # Shared libraries are required for tcl package
  BUILD_ALL_TARGETS += $(PACKAGE)
  PACKAGE_ARTIFACTS += $(PACKAGE)
endif

ifeq ($(ENABLE_STATIC_PKG),1)
  BUILD_ALL_TARGETS += $(TURBINE_EXECUTABLES)
endif

all: $(BUILD_ALL_TARGETS) $(BINS)

turbine: $(TURBINE)

package: $(PACKAGE) libs

USE_MAC = @USE_MAC@

INSTALL_PREFIX  = @prefix@

ifeq ($(DESTDIR),)
# 	Regular build
	ENABLE_DEB = 0
	INSTALL_BIN = $(INSTALL_PREFIX)/bin
	INSTALL_TOP = $(INSTALL_PREFIX)
else
# 	Debian installation
	ENABLE_DEB = 1
	INSTALL_BIN = $(DESTDIR)/bin
	INSTALL_TOP = $(DESTDIR)/lib/turbine
endif

INSTALL_ETC     = $(INSTALL_TOP)/etc
INSTALL_INCLUDE = $(INSTALL_TOP)/include
INSTALL_LIB     = $(INSTALL_TOP)/lib
INSTALL_SCRIPTS = $(INSTALL_TOP)/scripts
INSTALL_EXPORT  = $(INSTALL_TOP)/export
INSTALL_PY      = $(INSTALL_TOP)/py
# The submit scripts are loaded from their respective module.mk files
SCRIPTS_SUBMIT  :=

SYSTEM_LIBS = $(shell cat system-libs.txt)

ifeq (@ENABLE_DEV@,1)
	WARN_CONVERSION = -Wconversion
endif

# Shared object suffix is .so on Linux, .dylib on Mac
# GCC shared library creation argument
# Linux: -shared; Mac: -dynamiclib
# Use -flat_namespace on the Mac
ifeq ($(USE_MAC),no)
	USE_XLC = @USE_XLC@
	ifeq ($(USE_XLC),0)
#       	Not XLC: GCC/Linux
# CFLAGS += -mcmodel=medium # Now apparently required.
		PIC = -fPIC
		STD = -std=gnu99
		SHARED = -shared
		WARNS = -Wall $(WARN_CONVERSION)
#               LD flags for executables:
#               Use shared libraries by default
#               This is usually the default in Linux but is not the
#               default on Cray machines
		LDXFLAGS = -Bdynamic
	else
#       	Using XLC
		PIC = -qpic
		STD =
		SHARED = -qmkshrobj -qnostaticlink -qnostaticlink=libgcc
		WARNS =
# TODO: from manifest, should be applied here if anywhere
# On the BG/Q, set: -L /bgsys/drivers/V1R2M1/ppc64/comm/lib -lpami-gcc -lm -pthread -lmpl-gcc -lm
	endif

	SO_SUFFIX = so
	LD_EXEC_SYMBOL_EXPORT = -Wl,--export-dynamic
	MAC_FLAT =
	MAC_NAME =
else
# 	Mac
	STD = -std=gnu99
	SO_SUFFIX = dylib
        # OS X linker does not support export-dynamic
	LD_EXEC_SYMBOL_EXPORT =
	MAC_FLAT = -Wl,-flat_namespace
	MAC_NAME = -install_name $(INSTALL_LIB)/libtclturbine.dylib
	SHARED = -dynamiclib $(MAC_FLAT)
endif

TCL_TURBINE_LIB := tclturbine
TCL_TURBINE_SO = lib/lib$(TCL_TURBINE_LIB).$(SO_SUFFIX)

# Static library
TCL_TURBINE_A = lib/lib$(TCL_TURBINE_LIB).a

# Static library for static-linking specific functions
STATIC_PKG_LIB := tclturbinestatic
STATIC_PKG_A := lib/lib$(STATIC_PKG_LIB).a

# Resource libs are used in all builds
TCL_TURBINE_LIBS :=
ifeq ($(ENABLE_STATIC_PKG),1)
	TCL_TURBINE_LIBS += $(STATIC_PKG_A)
endif

# Flags needed to link
TCL_TURBINE_LIB_FLAGS := -L lib
# This order is required since static package lib refers to tcl turbine lib
ifeq ($(ENABLE_STATIC_PKG),1)
  TCL_TURBINE_LIB_FLAGS += -l$(STATIC_PKG_LIB)
endif
TCL_TURBINE_LIB_FLAGS += -l$(TCL_TURBINE_LIB)

ifeq ($(ENABLE_SHARED),1)
  TCL_TURBINE_LIBS += $(TCL_TURBINE_SO)
endif

ifeq ($(ENABLE_STATIC),1)
  TCL_TURBINE_LIBS += $(TCL_TURBINE_A)
endif

libs: $(TCL_TURBINE_LIBS)

PACKAGE_ARTIFACTS += $(TCL_TURBINE_LIBS)

ifeq ($(ENABLE_SHARED),1)
  # Shared libraries are one of the file build targets
  ENABLED_PACKAGES += $(TCL_TURBINE_LIBS)
endif

ifeq ($(ENABLE_STATIC),1)
  # Shared libraries are one of the file build targets
  ENABLED_PACKAGES += $(TCL_TURBINE_STATIC_LIBS)
endif

srcdir = @srcdir@

ifeq ($(V),)
  # Prints a short description of the action, does not show command
  Q=@echo
  E=@
else
ifeq ($(V),1)
  # Echoes the entire command
  Q=@echo >/dev/null
  E=
else # V=2
  # Echoes the description and the command
  Q=@echo ; echo
  E=
endif
endif

# Set includes
INCLUDES += -I . -I src/turbine -I src/tcl/turbine -I src/tcl/static-pkg/
ifeq ($(USE_XLC),1)
	CFLAGS += -qpack_semantic=gnu
endif

AR      = @AR@
ARFLAGS = cr
RANLIB  = @RANLIB@

C_UTILS = @USE_C_UTILS@
LIBCUTILS_A := @USE_LIBCUTILS_A@

TCL := @USE_TCL@
TCL_VERSION := @TCL_VERSION@
TCLSH := @USE_TCLSH@
TCL_LIB_DIR := @USE_TCL_LIB_DIR@
TCL_SYSLIB_DIR := @USE_TCL_SYSLIB_DIR@
TCL_LIB_NAME := tcl$(TCL_VERSION)
TCL_LIB_SO := @USE_LIBTCL_SO@
TCL_LIB_A := @USE_LIBTCL_A@
TCLSH_LOCAL := @USE_TCLSH_LOCAL@

TCL_LIB_DEPS := @TCL_LIB_SPEC_EXTRA@

MKSTATIC := scripts/mkstatic/mkstatic.tcl
MKSTATIC_TEMPLATE := scripts/mkstatic/mkstatic.c.template
# Bundle Tcl system libraries using mkstatic
MKSTATIC_FLAGS := --include-sys-lib ${TCL_SYSLIB_DIR} --tcl-version ${TCL_VERSION}
MKSTATIC_RUN := $(TCLSH_LOCAL) $(MKSTATIC) $(MKSTATIC_FLAGS)

MACHINE = @USE_MACHINE@

# On some systems, the user will use mpicc,
# on others, the user will specify the MPI include and lib paths
MPI_INCLUDE = @USE_MPI_INCLUDE@
MPI_LIB_DIR = @USE_MPI_LIB_DIR@
# The actual linker arguments:
MPI_LIB :=
INCLUDES += -I $(MPI_INCLUDE)
ifeq ($(filter $(MPI_LIB_DIR),$(SYSTEM_LIBS)),)
  ifneq ($(MPI_LIB_DIR),)
    MPI_LIB += -L$(MPI_LIB_DIR)
    RPATH_MPI = yes
  endif
endif
MPI_LIB_FLAGS = @USE_MPI_LIB_SPEC@
MPI_LIB += $(MPI_LIB_FLAGS)
MPI_LIB_A := @USE_MPI_LIB_A@
MPI_LIB_EXTRA_A := @USE_MPI_LIB_EXTRA_A@ # extra deps, e.g. mpl
MPE_LIB_A := @USE_MPE_LIB_A@

LAUNCHER = @USE_LAUNCHER@

ADLB = @USE_ADLB@
ifneq ($(ADLB),0)
	INCLUDES += -I $(ADLB)/include
endif
LIBADLB_A := @USE_LIBADLB_A@

ENABLE_MPE = @ENABLE_MPE@
USE_MPE = @USE_MPE@

ENABLE_XPT = @ENABLE_XPT@
ifeq ($(ENABLE_XPT),yes)
  DEFINES += -D ENABLE_XPT
endif

HAVE_JVM_SCRIPT    = @HAVE_JVM_SCRIPT@
USE_JVM_SCRIPT_HOME= @USE_JVM_SCRIPT_HOME@

HAVE_PYTHON          = @HAVE_PYTHON@
PYTHON_INCLUDE_FLAGS = @PYTHON_INCLUDE_FLAGS@
PYTHON_LIB_FLAGS     = @PYTHON_LIB_FLAGS@
PYTHON_LIBDIR        = @PYTHON_LIBDIR@
PYTHON_NAME          = @PYTHON_NAME@

HAVE_R = @HAVE_R@
USE_R  = @USE_R@
RCPP_PATH = @RCPP_PATH@
RINSIDE_PATH = @RINSIDE_PATH@

HAVE_JULIA = @HAVE_JULIA@
USE_JULIA  = @USE_JULIA@

HAVE_COASTER = @HAVE_COASTER@
USE_COASTER  = @USE_COASTER@

# Record ZLIB setting in comments for debugging:
ENABLE_ZLIB = @ENABLE_ZLIB@
ZLIB = @ZLIB_HOME@

CFLAGS += $(STD)
CFLAGS += -g
CFLAGS += $(WARNS)
ifeq ($(ENABLE_SHARED),1)
  CFLAGS += $(PIC)
endif
# This is referenced in lookup3.c - may want to drop this for speed
DEFINES += -D VALGRIND
INCLUDES += -I $(C_UTILS)/include
INCLUDES += @TCL_INCLUDE_SPEC@
ifeq ($(ENABLE_MPE),1)
	INCLUDES += -I $(USE_MPE)/include
endif
ifeq ($(HAVE_PYTHON),1)
	INCLUDES += $(PYTHON_INCLUDE_FLAGS)
endif
ifeq  ($(HAVE_R),1)
ifneq ($(USE_R),)
  INCLUDES += -I $(USE_R)/include
  R_LIBRARY = $(USE_R)/library
  ifneq ($(RINSIDE_PATH),)
   INCLUDES += -I $(RINSIDE_PATH)/include
  else
   INCLUDES += -I $(R_LIBRARY)/RInside/include
  endif
  ifneq ($(RCPP_PATH),)
   INCLUDES += -I $(RCPP_PATH)/include
  else
   INCLUDES += -I $(R_LIBRARY)/Rcpp/include
  endif
endif
endif
ifeq ($(HAVE_JULIA),1)
	INCLUDES += -I $(USE_JULIA)/src
	INCLUDES += -I $(USE_JULIA)/usr/include
	INCLUDES += -I $(USE_JULIA)/src/support
endif
ifeq ($(HAVE_COASTER),1)
	INCLUDES += -I $(USE_COASTER)/include
endif
ifeq ($(ENABLE_ZLIB),1)
  ifneq ($(strip $(ZLIB)), "")
    ifeq ($(filter $(ZLIB)/lib,$(SYSTEM_LIBS)),)
      INCLUDES += -I $(ZLIB)/include
      LIBS += -L $(ZLIB)/lib
      RPATH += -Wl,-rpath -Wl,$(ZLIB)/lib
    endif
  endif
  LIBS += -lz
endif

HDF5_CPPFLAGS = @HDF5_CPPFLAGS@
CFLAGS += $(DEFINES) $(INCLUDES) $(HDF5_CPPFLAGS)

# LIBS: links to ADLB, c-utils, MPE, and MPI
LIBS :=
LIBS += -L$(ADLB)/lib -ladlb
LIBS += -L$(C_UTILS)/lib -lexmcutils
ifeq ($(filter $(TCL_LIB_DIR),$(SYSTEM_LIBS)),)
  LIBS += -L$(TCL_LIB_DIR)
  RPATH_TCL = yes
endif
LIBS += -l$(TCL_LIB_NAME)
ifeq ($(ENABLE_MPE),1)
  ifeq ($(filter $(USE_MPE),$(SYSTEM_LIBS)),)
    LIBS += -L$(USE_MPE)/lib
    RPATH_MPE = yes
  endif
  LIBS += -lmpe
endif
LIBS += $(MPI_LIB)
ifeq ($(HAVE_PYTHON),1)
  LIBS += -L$(PYTHON_LIBDIR) $(PYTHON_LIB_FLAGS)
  RPATH_PYTHON = yes
endif
ifeq ($(HAVE_R),1)
ifneq ($(USE_R),)
  R_LIB = $(USE_R)/lib
  LIBS += -L$(R_LIB)
  RPATH_R = yes
  ifneq ($(RINSIDE_PATH),)
    RINSIDE_LIB = $(RINSIDE_PATH)/lib
  else
    RINSIDE_LIB = $(USE_R)/library/RInside/lib
  endif
  LIBS += -L$(RINSIDE_LIB)
endif
LIBS += -lRInside -lR

ifeq ($(USE_MAC),yes)
# if mac, the RInside library and python install name can be incorrect
# when installed locally. This will fix that in tclturbine
  RINSIDE_INSTALL_NAME=$(shell otool -D $(RINSIDE_PATH)/lib/libRInside.dylib | sed -n 2p)
  FIX_RINSIDE_INSTALL_NAME = install_name_tool -change $(RINSIDE_INSTALL_NAME) $(RINSIDE_LIB)/libRInside.dylib $(TCL_TURBINE_SO)

  ifneq ($(PYTHON_LIBDIR),)
    PYTHON_LIB_NAME =  $(PYTHON_LIBDIR)/lib$(PYTHON_NAME).dylib
    PYTHON_INSTALL_NAME = $(shell otool -D $(PYTHON_LIB_NAME) | sed -n 2p)
    FIX_PYTHON_INSTALL_NAME = install_name_tool -change $(PYTHON_INSTALL_NAME) $(PYTHON_LIB_NAME) $(TCL_TURBINE_SO)
  endif
else
   FIX_RINSIDE_INSTALL_NAME =
   FIX_PYTHON_INSTALL_NAME =
endif

endif
ifeq ($(HAVE_JVM_SCRIPT),1)
  SWIFTTJVM_LIB = $(USE_JVM_SCRIPT_HOME)/src
  LIBS += -L$(SWIFTTJVM_LIB)/.libs -lswifttjvm
endif
ifeq ($(HAVE_JULIA),1)
  JULIA_LIB = $(USE_JULIA)/usr/lib
  ifeq ($(filter $(JULIA_LIB),$(SYSTEM_LIBS)),)
    LIBS += -L$(JULIA_LIB)
    RPATH_JULIA = yes
  endif
  LIBS += -ljulia
endif

ifeq ($(HAVE_COASTER),1)
  COASTER_LIB := $(USE_COASTER)/lib
  ifeq ($(filter $(COASTER_LIB),$(SYSTEM_LIBS)),)
    LIBS += -L$(COASTER_LIB)
    RPATH_COASTER = yes
  endif
  LIBS += -lcoasterclient
endif

# HDF5 variables are blank if HDF5 is not enabled
HDF5_LINK_FLAGS = @HDF5_LDFLAGS@ @HDF5_LIBS@
LIBS += $(HDF5_LINK_FLAGS)

# If we are using libtcl*.a, need to always include these libraries
# TODO: would also be needed if we're doing full static link
ifeq ($(strip $(TCL_LIB_SO)),)
  LIBS += $(TCL_LIB_DEPS)
endif

# Build RPath to link to libraries at runtime.
# Avoid adding system directories to RPATH - this often causes the wrong
# version of the library to be linked from the system path.
RPATHS :=
RPATHS += -Wl,-rpath -Wl,$(INSTALL_LIB)
RPATHS += -Wl,-rpath -Wl,$(ADLB)/lib
RPATHS += -Wl,-rpath -Wl,$(C_UTILS)/lib
ifeq ($(RPATH_MPI),yes)
  RPATHS += -Wl,-rpath -Wl,$(MPI_LIB_DIR)
endif
ifeq ($(RPATH_TCL),yes)
  RPATHS += -Wl,-rpath -Wl,$(TCL_LIB_DIR)
endif
ifeq ($(RPATH_MPE),yes)
  RPATHS += -Wl,-rpath -Wl,$(USE_MPE)/lib
endif
ifeq ($(RPATH_PYTHON),yes)
  RPATHS += -Wl,-rpath -Wl,$(PYTHON_LIBDIR)
endif
ifeq ($(RPATH_R),yes)
  RPATHS += -Wl,-rpath -Wl,$(R_LIB)
  RPATHS += -Wl,-rpath -Wl,$(RINSIDE_LIB)
endif
ifeq ($(RPATH_JULIA),yes)
  RPATHS += -Wl,-rpath -Wl,$(JULIA_LIB)
endif
ifeq ($(RPATH_COASTER),yes)
  RPATHS += -Wl,-rpath -Wl,$(COASTER_LIB)
endif

### INCLUDES

DIR :=
TURBINE_SRC :=
TCL_TURBINE_SRC :=
STATIC_PKG_SRC :=
TURBINE_EXECUTABLE_MANIFESTS :=

include src/turbine/module.mk
include src/util/module.mk
include src/tcl/module.mk
include src/tcl/c-utils/module.mk
include src/tcl/adlb/module.mk
include src/tcl/blob/module.mk
include src/tcl/mpe/module.mk
include src/tcl/julia/module.mk
include src/tcl/python/module.mk
include src/tcl/r/module.mk
include src/tcl/jvm/module.mk
include src/tcl/launch/module.mk
include src/tcl/static-pkg/module.mk
include src/tcl/turbine/module.mk
include lib/module.mk
include scripts/main-wrap/module.mk
include scripts/submit/module.mk
include src/executables/module.mk
include maint/debian.mkf

TURBINE_SRC += $(TCL_ADLB_SRC)
TURBINE_SRC += $(TCL_C_UTILS_SRC)
TURBINE_SRC += $(TCL_BLOB_SRC)
TURBINE_SRC += $(TCL_MPE_SRC)
TURBINE_SRC += $(TCL_JULIA_SRC)
TURBINE_SRC += $(TCL_PYTHON_SRC)
TURBINE_SRC += $(TCL_R_SRC)
TURBINE_SRC += $(TCL_LAUNCH_SRC)
TURBINE_SRC += $(JVM_SCRIPT_SRC)
TURBINE_SRC += $(TCL_JVM_SRC)
TURBINE_SRC += $(TCL_TURBINE_SRC)
TURBINE_OBJS := $(patsubst %.c, %.o, $(TURBINE_SRC)) $(TCL_R_OBJS)

STATIC_PKG_OBJS = $(patsubst %.c, %.o, $(STATIC_PKG_SRC))

STATIC_PKG_RESOURCE_C := $(patsubst %.tcl, %_tcl.c, $(TCL_SRC))
STATIC_PKG_RESOURCE_O := $(patsubst %.c, %.o, $(STATIC_PKG_RESOURCE_C))
STATIC_PKG_RESOURCE_H := src/tcl/static-pkg/tcl-turbine-src.h

TURBINE_EXECUTABLE_SRC := $(patsubst %.manifest, %.c, $(TURBINE_EXECUTABLE_MANIFESTS))
TURBINE_EXECUTABLE_OBJS = $(patsubst %.c, %.o, $(TURBINE_EXECUTABLE_SRC))
TURBINE_EXECUTABLES := $(patsubst %.c, %, $(TURBINE_EXECUTABLE_SRC))

### DEPENDENCIES

TURBINE_DEPS := $(patsubst %.c, %.d, $(TURBINE_SRC))

TURBINE_EXECUTABLE_DEPS := $(patsubst %.c, %.d, $(TURBINE_EXECUTABLE_SRC))

STATIC_PKG_DEPS := $(patsubst %.c, %.d, $(STATIC_PKG_SRC))

TEST_SRC_MANIFEST :=
TEST_SRC_C :=
include tests/module.mk
TEST_DEPS := $(patsubst %.c, %.d, $(TEST_SRC_C))

# Dependency files:
# Remember that having a bad #include can cause dependency
# file generation to fail silently
# Solution: use target check_includes
DEPS := $(TURBINE_DEPS) $(TEST_DEPS)
ifeq ($(ENABLE_STATIC_PKG),1)
	DEPS += $(STATIC_PKG_DEPS) $(TURBINE_EXECUTABLE_DEPS)
endif

deps: $(DEPS)

ifeq (${DEPCC},)
# Assume we always have gcc for deps processing
DEPCC = gcc
endif

# Avoid dependency mpi.h if we don't know where it is:
ifeq ($(MPI_INCLUDE),0)
	DEP_DROP = -d mpi.h
endif

dirname = $(patsubst %/,%,$(dir $(1)))

%.d: %.c
	$(Q) "  DEP		$(@)"
	$(E) CC="$(DEPCC)" $(srcdir)/maint/depend.sh \
             $(DEP_DROP) $(call dirname, $(*)) $(<) $(@) $(DEFINES) \
	     $(INCLUDES) $(HDF5_CPPFLAGS) $(DEFINES)

ifeq (,$(filter clean deps,$(MAKECMDGOALS)))
 -include $(DEPS)
endif

# Extract all files from *.d files, format and sort:
# Formats to one file per line & extracts junk and extra files in *.d
deps.txt: $(DEPS)
	$(Q) "  DEPS.TXT "
	$(E) maint/collect.sh $(@) $(DEPS)

# Check existing *.d files for files that do not exist
# Useful when dependency file generation is failing
# Must "make clean" to re-check correctly
EXISTING_D = $(shell find . -name *.d)

check_includes: deps_contents.txt
	$(Q) "  CHECK.SH"
	$(E) $(srcdir)/maint/check.sh deps_contents.txt

deps_contents.txt:
	$(Q) "  SH		$(@)"
	$(E) $(srcdir)/maint/collect.sh $(@) $(EXISTING_D)

### TAGS

tags: TAGS

TAGS: deps.txt
	$(Q) "  TAGS "
	$(E) etags `cat deps.txt`

### COMPILE

%.o: %.c
# This line produces a false autoscan message on token 'CC' (C++)
	$(Q) "  CC		$(@)"
	$(E) $(CC) $(CFLAGS) \
             -c $(<) -o $(@)

### LINK

$(TCL_TURBINE_A): $(TURBINE_OBJS)
ifeq ($(ENABLE_STATIC),0)
	@echo "Static libraries were disabled, cannot build target!"
	@exit 1
endif
	$(Q) "  AR		$(@)"
	$(E) $(AR) $(ARFLAGS) $(@) $(TURBINE_OBJS)
	$(E) $(RANLIB) $(@)

$(TCL_TURBINE_SO): $(TURBINE_OBJS)
ifeq ($(ENABLE_SHARED),0)
	@echo "Shared libraries were disabled, cannot build target!"
	@exit 1
endif
	$(Q) "  LINK		$(@)"
	$(E) $(LD) $(SHARED) $(LDFLAGS) -o $(@) \
             $(TURBINE_OBJS) \
             $(LIBS) \
             $(RPATHS) \
             $(MAC_NAME)
	$(FIX_RINSIDE_INSTALL_NAME)
	$(FIX_PYTHON_INSTALL_NAME)

$(STATIC_PKG_A): $(STATIC_PKG_OBJS) $(STATIC_PKG_RESOURCE_O)
	$(Q) "  AR		$(@)"
	$(E) $(AR) $(ARFLAGS) $(@) $(STATIC_PKG_OBJS) $(STATIC_PKG_RESOURCE_O)
	$(E) $(RANLIB) $(@)

### TCL SOURCE LINKING
# Compilation and linking to get Tcl source as C arrays

F2A := scripts/mkstatic/file2array.sh
F2A_MKHDR := scripts/mkstatic/files2arrays_mkhdr.sh

$(STATIC_PKG_RESOURCE_C): %_tcl.c : %.tcl $(F2A)
	$(Q) "  FILE2ARRAY 	$(@)"
	$(E) $(F2A) -v "turbine_lib_$(shell basename $< | sed 's/[\.-]/_/g')" $< > "$(@).tmp"
	$(E) mv "$(@).tmp" $(@)

$(STATIC_PKG_RESOURCE_H): $(STATIC_PKG_RESOURCE_C) $(F2A_MKHDR)
	$(Q) "  MKHDR		$(@)"
	$(E) $(F2A_MKHDR) -v turbine_lib_src $(STATIC_PKG_RESOURCE_C) > $(@).tmp
	$(E) mv "$(@).tmp" $(@)

# Regular .o compilation rule generates .o files

### LINK EXECUTABLES

executables: $(TURBINE_EXECUTABLES)

# Rule to build C source file based on manifest
# Also create deps file so it can be correctly recreated upon change.
%.c: %.manifest %.manifest.d $(MKSTATIC) $(MKSTATIC_TEMPLATE)
	$(Q) "  MKSTATIC	$(@)"
	$(E) $(MKSTATIC_RUN) $< -c $(@)

%.manifest.d: %.manifest $(MKSTATIC) $(MKSTATIC_TEMPLATE)
	$(Q) "  MKSTATIC_DEPS	$(@)"
	$(E) $(MKSTATIC_RUN) $< \
	  --deps $(@) $(patsubst %.manifest, %.c, $<)

# Binary executables - link from .o
# Currently builds a dynamically linked executable
# Link statically where possible by adding static libs explicitly.
#   Static libs must be compiled with -fPIC or -fPIE
#
# Need to export Tcl API symbols to link with dynamically loaded modules.
$(TURBINE_EXECUTABLES): %: %.o ${TCL_TURBINE_LIBS} ${STATIC_PKG_RESOURCE_H}
	$(Q) "  LINK X	$(@)"
	$(E) $(CC) $(LDFLAGS) $(LDXFLAGS) $(LD_EXEC_SYMBOL_EXPORT) \
        $(<) \
        $(MAC_FLAT) \
        $(TCL_TURBINE_LIB_FLAGS) \
        $(LIBS) -lm \
	$(RPATHS) \
	-o $(@)

### TESTS

# Test cases in C as objects
TEST_OBJS = $(patsubst %.c, %.o, $(TEST_SRC_C))
# Test cases in C compiled to binary
TEST_BINS = $(patsubst %.c, %.x, $(TEST_SRC_C))
# Test case results
TEST_SCRIPTS = $(patsubst %.c, %.sh, $(TEST_SRC_C))
# Test case outputs
TEST_OUTPUT  := $(patsubst %.c,   %.out, $(TEST_SRC_C))
TEST_OUTPUT  += $(patsubst %.tcl, %.out, $(TEST_SRC_TCL))
# Test case results
TEST_RESULTS := $(patsubst %.c,        %.result, $(TEST_SRC_C))
TEST_RESULTS += $(patsubst %.tcl,      %.result, $(TEST_SRC_TCL))
TEST_RESULTS += $(patsubst %.manifest, %.result, $(TEST_SRC_MANIFEST))
ifeq ($(ENABLE_STATIC_PKG),1)
    TEST_STATIC_PREREQS = $(STATIC_PKG_A) $(STATIC_PKG_RESOURCE_A)
else
    TEST_STATIC_PREREQS =
endif


# Target to just build all C tests
tests: $(TEST_BINS)

# Run all tests
test_results: $(TEST_RESULTS)

# Binary executables in the test suite
$(TEST_BINS): %.x: %.o install.txt $(TEST_STATIC_PREREQS)
	$(Q) "  LINK		$(@)"
	$(E) $(CC) $(LDFLAGS) $(<) \
        $(MAC_FLAT) \
        $(TCL_TURBINE_LIB_FLAGS) \
        $(LIBS) \
	$(RPATHS) \
	-o $(@)

# Test result rule for C tests
%.result: %.sh %.x install.txt
#       Cannot use chmod in config.status
	$(E) chmod u+x tests/runbin.zsh
	$(Q) "  SH		$(@)"
	$(E) mkdir -p tests/data
	$(E) rm -f $(@)
	$(E) $(<) > $(*).tmp 2>&1
	$(E) mv $(*).tmp $(@) 2>&1

# Test result rule for Tcl tests
%.result: %.sh %.tcl $(PACKAGE_ARTIFACTS) bin/turbine install.txt
	$(Q) "  SH		$(@)"
	$(E) mkdir -p tests/data
#       Remove old result if present
	$(E) rm -f $(@)
#       Mark that we ran test for Jenkins test result script
	$(E) touch $(*).lastrun
#       Run test script: %.sh
	$(E) LAUNCH=$(LAUNCHER) $(<) > $(*).tmp 2>&1
#       Check for valgrind errors
	$(E) ! grep -q "==[0-9]+==" $(*).out
#       Success: create result file
	$(E) mv $(*).tmp $(@)

### INSTALL

HAVE_CP_U = @CP_U@
ifeq ($(HAVE_CP_U),yes)
	CP_ARGS = -uvf
else
	CP_ARGS = -vf
endif

HAVE_CP_PARENTS = @CP_PARENTS@
ifeq ($(HAVE_CP_PARENTS),yes)
	CP_PARENTS = cp --parents
else
	CP_PARENTS = maint/cp-parents.sh
endif

# These files will be copied to the installation directory
PROVENANCE = version.txt source.txt config.log

# Maintaining the install.txt file is a simple way to
# create a dependency on the installation
install: install.txt

# Installed files:
DIRECTORIES := $(INSTALL_TOP) $(INSTALL_BIN) $(INSTALL_ETC)     \
              $(INSTALL_EXPORT) $(INSTALL_INCLUDE) $(INSTALL_LIB) \
	      $(INSTALL_SCRIPTS)

ifeq ($(HAVE_PYTHON),1)
	DIRECTORIES += $(INSTALL_PY)
endif

TURBINE_HEADERS := src/turbine/turbine.h      \
                   src/turbine/turbine-finalizers.h \
                   src/tcl/turbine/tcl-turbine.h \
                   src/tcl/static-pkg/static-pkg.h \
                   src/turbine/turbine-defs.h \
                   src/tcl/blob/blob.h
ifeq ($(ENABLE_STATIC_PKG),1)
  TURBINE_HEADERS += $(STATIC_PKG_RESOURCE_H)
endif

BINS := $(shell ls bin/turbine               \
                   bin/turbine-pilot         \
                   bin/turbine-write-doubles \
                   bin/turbine-read-doubles )
ifeq ($(ENABLE_STATIC_PKG),1)
	BINS += $(TURBINE_EXECUTABLES)
endif
EXPORTS = $(shell ls export/*.swift )
SCRIPTS = $(shell ls scripts/*.zsh scripts/*.sh scripts/*.tcl \
		     scripts/mkstatic/* $(SCRIPTS_MAINWRAP) \
		     $(SCRIPTS_SUBMIT) py/*.py )

install.txt: $(PACKAGE_ARTIFACTS) $(BINS) $(EXPORTS) \
              $(TURBINE_HEADERS) $(SCRIPTS) $(SCRIPTS_SUBMIT)
#       Note: this is re-run if anything changes
	@echo
	$(Q) "  INSTALL		$(INSTALL_PREFIX)"
	$(E) rm -f $(@)
# 	Configure-generated files
	$(E) chmod u+x bin/turbine bin/turbine-pilot
#       Set up directories
	$(E) mkdir -pv $(DIRECTORIES)
#       Copy in build provenance files
	$(E) cp $(CP_ARGS) $(PROVENANCE) $(INSTALL_ETC)
#       Copy Turbine items
	$(E) cp $(CP_ARGS) $(BINS)               $(INSTALL_BIN)
	$(E) cp $(CP_ARGS) lib/*.tcl             $(INSTALL_LIB)
	$(E) cp $(CP_ARGS) $(TCL_TURBINE_LIBS)   $(INSTALL_LIB)
	$(E) $(CP_PARENTS) $(CP_ARGS) $(SCRIPTS) $(INSTALL_TOP)
	$(E) ln -fs $(INSTALL_SCRIPTS)/main-wrap/genleaf $(INSTALL_BIN)
	$(E) $(CP_PARENTS) $(CP_ARGS) $(EXPORTS) $(INSTALL_TOP)
ifeq ($(HAVE_PYTHON),1)
	$(E) cp $(CP_ARGS) py/*.py $(INSTALL_PY)
endif
	$(E) cp $(CP_ARGS) $(TURBINE_HEADERS)    $(INSTALL_INCLUDE)
	$(E) $(CP_PARENTS) $(CP_ARGS) etc/help/*.txt $(INSTALL_TOP)
	@echo
	$(Q) "  CREATE  	$(@)"
	$(E) echo  "PREFIX: $(INSTALL_PREFIX)"   >  $(@)
	$(E) echo  "ENABLE_DEB: $(ENABLE_DEB)"   >> $(@)
	$(E) echo  "SOURCE: $(PWD)"              >> $(@)
	$(E) date "+DATE:   %m/%d/%Y %I:%M%p"    >> $(@)
#       Use true to ignore errors (e.g., if this is not an git clone)
	$(E) ( git log -n 1 --pretty=format:"COMMIT: %h %aD %s%n" ; true ) >> $(@) 2>&1
	$(E) cp $(CP_ARGS) $(@) $(INSTALL_TOP)

### Autoconf sanity:

configure: bootstrap
	@echo
	@echo "Configuration is not up to date (bootstrap)!"
	@echo "Run ./bootstrap and ./configure again."
	@echo
	@exit 1

Makefile: configure.ac
	@echo
	@echo "Configuration is not up to date (Makefile)!"
	@echo "Run ./bootstrap and ./configure again."
	@echo
	@exit 1

### CLEAN

clean::
	@echo
	@echo "  CLEAN"
	@rm -fv  $(PACKAGE) install.txt
	@rm -fv  $(TCL_TURBINE_A) $(TCL_TURBINE_SO)
	@rm -fv  $(STATIC_PKG_A)
	@rm -fv  $(DEPS) $(TEST_DEPS) deps.txt deps_contents.txt TAGS
	@rm -fv  $(TEST_BINS) $(TEST_OBJS) $(TEST_OUTPUT)
	@rm -fv  $(TEST_RESULTS)
	@rm -fv  $(TURBINE_OBJS) $(STATIC_PACKAGE_OBJS)
	@rm -fv  $(TURBINE_SRC_A) $(STATIC_PKG_RESOURCE_O)
	@rm -fvr tests/data

clean-results:
	@echo
	@echo "Removing tests/*.result"
	@echo
	@rm -f tests/*.result

# Clean *.result files that did not succeed
clean-failed:
	@rm -fv `grep -L "exit 0" **/*.result`

distclean:: clean
	@rm -fv Makefile **/*.mk
	@rm -fv src/turbine/turbine-version.h
	@rm -fv scripts/turbine-config.sh
	@rm -fv scripts/turbine-build-config.sh
	@rm -fv system-libs.txt

# This line causes a false autoscan warning on token 'install'
.PHONY: clean install package package_static libs test_results

### DEBUG BUILD SYSTEM

# Useful target when debugging the build system
debug_build:
	@echo DEPS: $(DEPS)
	@echo TURBINE_SRC: $(TURBINE_SRC)
	@echo TURBINE_OBJS: $(TURBINE_OBJS)
	@echo TESTS: $(TESTS)
	@echo TEST_SRC_C: $(TEST_SRC_C)
# 	@echo STATIC_PKG_DEPS: $(STATIC_PKG_DEPS)
# 	@echo EXISTING_D: $(EXISTING_D)
