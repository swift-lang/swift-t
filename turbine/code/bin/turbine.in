#!/usr/bin/env zsh

# Copyright 2013 University of Chicago and Argonne National Laboratory
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License

# Turbine wrapper script

# Sets Turbine location, obtains configuration, launches

# For usage: turbine -h

# Set TURBINE_LAUNCH_OPTIONS to pass additional arguments to mpiexec

# Defaults:
# Number of processes
PROCS=${PROCS:-2}
# Environment variables for mpiexec execution
ENV_VARS=()
# Use MPI rank line prefixing?
LINE_PREFIX_ENABLED=0
LINE_PREFIX=
# MPI machine file
MACHINE_FILE=0
MACHINE_MODE=""
REPORT_VERSION=0
VERBOSE=0
TURBINE_STATIC_EXEC=0
EXEC_SCRIPT=0
DEBIAN_BUILD=@DEBIAN_BUILD@ # Let configure-time substitution tell us
                            # if this is a Debian installation

# Scheduler script options (for PBS, Cobalt, etc.)
SCHED_OPTS=()

while getopts "cCd:D:f:hlm:M:n:vVxX:e:i:o:s:St:wY" OPTION
do
  case ${OPTION} in
    c)
      PRINT_CONFIG=1
      ;;
    C)
      PRINT_BUILD_CONFIG=1
      ;;
    f)
      MACHINE_FILE=${OPTARG}
      ;;
    h)
      PRINT_HELP=1
      ;;
    l)
      LINE_PREFIX_ENABLED=1
      ;;
    m)
      MACHINE_MODE=${OPTARG}
      ;;
    n)
      PROCS=${OPTARG}
      ;;
    v)
      REPORT_VERSION=1
      ;;
    V)
      VERBOSE=1
      ;;
    X)
      TURBINE_STATIC_EXEC=1
      ;;
    x)
      EXEC_SCRIPT=1
      ;;
    # Pass through to scheduler script:
    d) ;& D) ;& i) ;& M) ;& o) ;& s) ;& t) ;& w) ;& Y)
      SCHED_OPTS+=( -${OPTION} ${OPTARG} )
      ;;
    e)
      # Set environment variable
      # Not sure yet if using scheduler script, so place in both arrays
      ENV_VARS+=( ${OPTARG} )
      SCHED_OPTS+=( -${OPTION} ${OPTARG} )
      ;;
    \?)
      # Bash already reported an error
      exit 1
      ;;
  esac
done

if (( VERBOSE ))
then
  set -x
fi

TURBINE_BIN=$( dirname $0 )

if (( DEBIAN_BUILD ))
then
  TURBINE_HOME=/usr/lib/turbine
fi
if (( ! ${+TURBINE_HOME} ))
then
  TURBINE_HOME=$( cd ${TURBINE_BIN}/.. ; /bin/pwd )
fi

if (( PRINT_CONFIG ))
then
  echo ${TURBINE_HOME}/scripts/turbine-config.sh
  exit 0
fi
if (( PRINT_BUILD_CONFIG ))
then
  echo ${TURBINE_HOME}/scripts/turbine-build-config.sh
  exit 0
fi

# Load Turbine configuration settings
source ${TURBINE_HOME}/scripts/turbine-config.sh
if (( ${?} != 0 ))
then
  echo "Turbine installation is broken!"
  exit 1
fi

report_version()
{
  print "Turbine ${TURBINE_VERSION}"
  print " in: ${TURBINE_HOME}"
  SOURCE_TXT=${TURBINE_HOME}/etc/source.txt
  if [[ -f ${SOURCE_TXT} ]]
  then
    print " installed from: $( cat ${SOURCE_TXT} )"
  fi
  print " using CC:  ${USE_CC}"
  print " using MPI: ${MPI_LABEL}"
  print " using Tcl: ${TCLSH}"
  if (( ${#TURBINE_USE_PYTHON} + ${#TURBINE_USE_PYTHON_NAME} ))
  then
    print " using Python: ${TURBINE_USE_PYTHON} ${TURBINE_USE_PYTHON_NAME}"
  fi
  if [[ ${TURBINE_USE_R} != 0 ]]
  then
    print " using R: ${TURBINE_USE_R}"
  fi
}

if (( REPORT_VERSION ))
then
  report_version
  exit 0
fi

print_help()
{
  cat ${TURBINE_HOME}/etc/help/header.txt
  printf "OPTIONS\n\n"
  # These options are available from swift-t
  cat ${TURBINE_HOME}/etc/help/options-1.txt
  # These options are not available from swift-t
  cat ${TURBINE_HOME}/etc/help/options-2.txt
  print
  cat ${TURBINE_HOME}/etc/help/env.txt
  print
  cat ${TURBINE_HOME}/etc/help/footer.txt
}

if (( PRINT_HELP ))
then
  echo
  report_version
  echo
  print_help
  exit 0
fi

if [[ ${MACHINE_FILE} != 0 ]]
then
  if [[ ${MPI_IMPL} == "OpenMPI" ]]
  then
    TURBINE_LAUNCH_OPTIONS+=( --hostfile ${MACHINE_FILE} )
  else # MPICH
    TURBINE_LAUNCH_OPTIONS+=( -f ${MACHINE_FILE} )
  fi
fi

shift $(( OPTIND-1 ))

if [[ ${#*} < 1 ]]
then
  echo "turbine: no program!"
  exit 1
fi

PROGRAM=$1
shift
ARGS=( ${*} )

if [[ ! -f ${PROGRAM} ]]
then
  echo "turbine: Program not found: ${PROGRAM}"
  exit 1
fi
if [[ ${#PROGRAM%.swift} != ${#PROGRAM} ]]
then
  echo "turbine: Given a Swift script: ${PROGRAM}"
  echo "\t Turbine inputs are normally *.tic or *.tcl"
  echo "\t Use stc to generate a *.tic from a *.swift"
  exit 1
fi

if (( EXECUTABLE_PROGRAM ))
then
  # Don't use TCLSH
  TCLSH=""
fi

if (( ${LINE_PREFIX_ENABLED} ))
then
  LINE_PREFIX="${TURBINE_LINE_OUTPUT_FLAG}"
fi

LAUNCH_OPTIONS=()
LAUNCH_OPTIONS+=${LINE_PREFIX}
LAUNCH_OPTIONS+=( -n ${PROCS} )
LAUNCH_OPTIONS+=( ${TURBINE_LAUNCH_OPTIONS} )

if (( VERBOSE ))
then
  which ${TURBINE_LAUNCHER}
fi

if (( ${#TURBINE_USE_PYTHON} ))
then
  export PYTHONPATH=${TURBINE_HOME}/py${PYTHONPATH:+:}${PYTHONPATH:-}
fi

check_machine()
# Confirm that we have a script for this machine type
{
  local M
  for M in $( ls ${TURBINE_HOME}/scripts/submit )
  do
    [[ ${MACHINE_MODE} == ${M} ]] && return
  done
  # We didn't find a match
  echo "No such machine: ${MACHINE_MODE}"
  exit 1
}

if [[ -n ${MACHINE_MODE} ]]
then
  # Use a scheduler script...
  check_machine
  # Copy in all Turbine arguments:
  MACHINE_ARGS=()
  MACHINE_ARGS+=( -n ${PROCS} )
  (( VERBOSE )) && MACHINE_ARGS+=( -V )
  (( TURBINE_STATIC_EXEC )) && MACHINE_ARGS+=( -X )
  (( EXEC_SCRIPT )) && MACHINE_ARGS+=( -x )
  # Construct the scheduler script name
  RUN_SCRIPT_NAME=${MACHINE_MODE}/turbine-${MACHINE_MODE}-run.zsh
  RUN_SCRIPT=${TURBINE_HOME}/scripts/submit/${RUN_SCRIPT_NAME}
  # Call the scheduler script:
  ${RUN_SCRIPT} ${MACHINE_ARGS} ${SCHED_OPTS} ${PROGRAM} ${ARGS}
  exit ${?}
fi

# Just use mpiexec right now
if [[ ${TURBINE_LAUNCHER} == 0 ]]
then
  print "Turbine is not configured for the mpiexec launcher!"
  print "Use turbine -m <machine> ."
  exit 1
fi

for KV in ${ENV_VARS}
do
  export ${KV}
done

# TURBINE_INTERPOSER allows user to insert valgrind, strace, etc.
${TURBINE_LAUNCHER} ${LAUNCH_OPTIONS} ${=TURBINE_INTERPOSER} \
                    ${TCLSH} ${PROGRAM} ${ARGS}
# Exit code returned by shell script
