mkstatic is a tool to automate creation of standalone Turbine program
executables with Tcl scripts and binary code linked in.  The main aim
of this is to reduce the number of small Tcl source or shared library
files that need to be read upon application launch.  This is
particularly important for large-scale parallel applications running
on parallel file systems that perform poorly in that scenario.

mkstatic is similar in many ways to the mkTclApp utility, but has been
specialized for our workflow and purposes.

The basic workflow is as follows:

1. User writes a manifest file specifying Tcl code and object
  files/libraries to link into the executable.  See example.manifest
  for an example.

2. User invokes mkstatic.tcl to generate C source code for the main file

  mkstatic.tcl example.manifest -c example.c

4. User compiles C source code

  gcc -c example.c -o example.o

5. User invokes mkstatic.tcl to produce correct linker flags

  LINK_OBJS=$( mkstatic.tcl example.manifest --link-objs )
  LINK_FLAGS=$( mkstatic.tcl example.manifest --link-flags )

5. User links executable

  gcc -o example example.o ${LINK_OBJS} ${LINK_FLAGS}

6. Optionally, if a Makefile is used to control compliation, the
  Makefile can invoke mkstatic.tcl to create Make dependency files to
  ensure that the output executable is updated when any inputs change

  mkstatic.tcl example.manifest --deps example.manifest.d example.c
  mkstatic.tcl example.manifest --link-deps example.x.d example

Features:
- The executable can have a main script compiled in, or it can accept
  a command link parameter to specify a main script at launch time.


TODOs:
- Link in Tcl core library code found in $TCL_INSTALL/libs/$tcl_version,
  which can just be evaled at program startup, starting with init.tcl
