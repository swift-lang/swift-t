#!/usr/bin/env zsh
set -eu

# STC: Swift-Turbine Compiler

# Usage: stc <OPTIONS>* <INPUT> <OUTPUT>?
# Input: Given INPUT file
# Output: Given OUTPUT file or standard output
# Exit code: Result from java

# Run "stc -h" for full options list

# Use this JVM (e.g., /usr/bin/java):
JVM=unset

DEBIAN_BUILD=@DEBIAN_BUILD@ # Filled in by build.xml
if (( DEBIAN_BUILD ))
then
  STC_HOME=/usr/lib/stc
else
  STC_HOME=$( cd $( dirname $0 )/.. ; /bin/pwd )
fi
source "$STC_HOME/etc/stc-config.sh"
source "$STC_HOME/bin/helpers.zsh"

COMPILER_OPTS=()
O0_OPTS=()
O1_OPTS=("constant-fold" "dead-code-elim" "value-number" "algebra"
         "finalized-var"
         "flatten-nested" "shared-constants" "demote-globals" "unroll-loops"
         "controlflow-fusion" "propagate-aliases"
         "merge-refcounts" "cancel-refcounts" "piggyback-refcounts"
         "batch-refcounts" "hoist-refcounts")
O2_OPTS=("dataflow-op-inline" "wait-coalesce" "hoisting"
         "function-signature" "array-build" "loop-simplify"
         "function-inline")
O3_OPTS=("pipeline" "reorder-insts" "expand-loops" "full-unroll"
         "full-function-inline")
EXPERIMENTAL_OPTS=()

# The *.swift file
INPUT=""
# The *.tic file
OUTPUT=""

# OUTPUT_MODE= turbine or cpp
OUTPUT_MODE=turbine

# Is preprocessor enabled?
PREPROCESS=true

typeset -T RPATH rpath
rpath=()

# Keyword args to pass to compiler
STC_ARGS=()

# If true, only compile if the TIC is not up-to-date wrt these files
CHECK_DEPS=0
# If CHECK_DEPS, we check against these files
DEPS=()

IMPORT_STRINGS=()

function get_compiler_opt_name() {
    case $1
        in
        constant-fold) echo "stc.opt.constant-fold"
                    return 0
                    ;;
        shared-constants) echo "stc.opt.shared-constants"
                    return 0
                    ;;
        demote-globals) echo "stc.opt.demote-globals"
                    return 0
                    ;;
        dead-code-elim) echo "stc.opt.dead-code-elim"
                    return 0
                    ;;
        flatten-nested) echo "stc.opt.flatten-nested"
                    return 0
                    ;;
        value-number) echo "stc.opt.value-number"
                    return 0
                    ;;
        finalized-var) echo "stc.opt.finalized-var"
                    return 0
                    ;;
        algebra) echo "stc.opt.algebra"
                    return 0
                    ;;
        dataflow-op-inline) echo "stc.opt.dataflow-op-inline"
                    return 0
                    ;;
        wait-coalesce) echo "stc.opt.wait-coalesce"
                    return 0
                    ;;
        pipeline) echo "stc.opt.pipeline"
                    return 0
                    ;;
        controlflow-fusion) echo "stc.opt.controlflow-fusion"
                    return 0
                    ;;
        function-inline) echo "stc.opt.function-inline"
                    return 0;
                    ;;
        full-function-inline) echo "stc.opt.full-function-inline"
                    return 0;
                    ;;
        function-signature) echo "stc.opt.function-signature"
                    return 0;
                    ;;
        hoisting) echo "stc.opt.hoist"
                    return 0
                    ;;
        reorder-insts) echo "stc.opt.reorder-insts"
                    return 0
                    ;;
        disable-asserts) echo "stc.opt.disable-asserts"
                    return 0
                    ;;
        unroll-loops) echo "stc.opt.unroll-loops"
                    return 0
                    ;;
        expand-loops) echo "stc.opt.expand-loops"
                    return 0
                    ;;
        full-unroll) echo "stc.opt.full-unroll"
                    return 0
                    ;;
        array-build) echo "stc.opt.array-build"
                    return 0
                    ;;
        loop-simplify) echo "stc.opt.loop-simplify"
                    return 0
                    ;;
        propagate-aliases) echo "stc.opt.propagate-aliases"
                    return 0
                    ;;
        merge-refcounts) echo "stc.opt.merge-refcounts"
                    return 0
                    ;;
        cancel-refcounts) echo "stc.opt.cancel-refcounts"
                    return 0
                    ;;
        batch-refcounts) echo "stc.opt.batch-refcounts"
                    return 0
                    ;;
        piggyback-refcounts) echo "stc.opt.piggyback-refcounts"
                    return 0
                    ;;
        hoist-refcounts) echo "stc.opt.hoist-refcounts"
                    return 0
                    ;;
        array-switcheroo) echo "stc.array-ref-switcheroo"
                    return 0
                    ;;
        separate-engine) echo "stc.turbine.separate-engine"
                    return 0
                    ;;
        refcounting)
                    echo "stc.refcounting"
                    return 0
                    ;;
        checkpointing)
                    echo "stc.checkpointing"
                    return 0
                    ;;
        auto-declare)
                    echo "stc.auto-declare"
                    return 0
                    ;;
        preproc-force-gcc)
                    echo "stc.preproc.force-gcc"
                    return 0
                    ;;
        preproc-force-cpp)
                    echo "stc.preproc.force-cpp"
                    return 0
                    ;;
       *)
         return 1
         ;;
    esac
}

function add_rpath() {
  verbose "RPATH: $1"
  rpath+=$1
}

function disable_opt() {
  local OPTNAME=$(get_compiler_opt_name $1)
  if [ -z "$OPTNAME" ]; then
    echo "ERROR Invalid compiler option $1" 1>&2
    return 1
  fi
  COMPILER_OPTS+="-D${OPTNAME}=false"
}

function enable_opt() {
  local OPTNAME=$(get_compiler_opt_name $1)
  if [ -z "$OPTNAME" ]; then
    echo "ERROR Invalid compiler option $1" 1>&2
    return 1
  fi
  COMPILER_OPTS+="-D${OPTNAME}=true"
}

OPTLEVEL=
function set_opt_level() {
  OPTLEVEL=$1
  verbose "Optimization level ${OPTLEVEL}"
  if [ ${OPTLEVEL} = 0 ]; then
    ENABLED_OPTS=($O0_OPTS)
    DISABLED_OPTS=($O1_OPTS $O2_OPTS $O3_OPTS $EXPERIMENTAL_OPTS)
  elif [ ${OPTLEVEL} = 1 ]; then
    ENABLED_OPTS=($O0_OPTS $O1_OPTS)
    DISABLED_OPTS=($O2_OPTS $O3_OPTS $EXPERIMENTAL_OPTS)
  elif [ ${OPTLEVEL} = 2 ]; then
    ENABLED_OPTS=($O0_OPTS $O1_OPTS $O2_OPTS)
    DISABLED_OPTS=($O3_OPTS $EXPERIMENTAL_OPTS)
  elif [ ${OPTLEVEL} = 3 ]; then
    ENABLED_OPTS=($O0_OPTS $O1_OPTS $O2_OPTS $O3_OPTS)
    DISABLED_OPTS=($EXPERIMENTAL_OPTS)
  elif [ ${OPTLEVEL} = X ]; then
    ENABLED_OPTS=($O0_OPTS $O1_OPTS $O2_OPTS $O3_OPTS $EXPERIMENTAL_OPTS)
    DISABLED_OPTS=()
  else
    echo "Invalid optimization level -O ${OPTLEVEL}"
    return 1
  fi
  for opt in $DISABLED_OPTS; do
    disable_opt ${opt}
  done
  for opt in $ENABLED_OPTS; do
    enable_opt ${opt}
  done
}

help()
{
  cat ${STC_HOME}/etc/help/stc-header.txt
  print
  # These options are also available in the swift-t interface:
  cat ${STC_HOME}/etc/help/options-1.txt
  # These options are not available in the swift-t interface:
  cat ${STC_HOME}/etc/help/options-2.txt
  print
  # These are details about compiler flag terms
  cat ${STC_HOME}/etc/help/option-terms.txt
  echo
  report_optimizations
  exit 0
}

report_optimizations()
{
  echo "Optimization levels:"
  echo "===================="
  echo "All levels include optimizations from previous."
  echo "O0 optimizations: ${O0_OPTS}"
  echo "O1 optimizations: ${O1_OPTS}"
  echo "O2 (default) optimizations: ${O2_OPTS}"
  echo "O3 optimizations: ${O3_OPTS}"
  echo "OX (experimental) optimizations: ${EXPERIMENTAL_OPTS}"
}

# Set this to 1 to debug this script (-V)
VERBOSE=0
verbose()
{
  if (( VERBOSE ))
  then
    print "stc: ${*}"
  fi
}

lookup_java()
{
  if [[ ${JVM} == "unset" ]]
  then
    # Set Java from PATH
    JVM=$( which java || true )
    if [[ ${JVM} == *"not found" ]]
    then
      # We didn't find it
      JVM="unset"
    fi
  fi

  verbose "trying JVM: ${JVM}"

  if [[ ! -x ${JVM} ]]
  then
    # Broken Java: User gave bad stc -j argument
    print "Cannot run java!"
    print "Tried: ${JVM}"
    return 1
  fi
}

report_version()
{
  printf "STC: Swift-Turbine Compiler "
  cat ${STC_HOME}/etc/version.txt
  printf "\t for Turbine: "
  cat ${STC_HOME}/etc/turbine-version.txt
  if lookup_java
  then
    print "Using Java VM:    ${JVM}"
  else
    print "Could not find Java!"
  fi
  print "Using Turbine in: ${TURBINE_HOME}"
  exit 0
}

# Set default options before processing args
set_opt_level 2

while getopts "A:C:d:D:Ef:F:hI:i:j:L:pO:o:r:uU:vVx" OPTION
do
  case ${OPTION}
    in
    A)
      STC_ARGS+="-A${OPTARG}"
      ;;
    C) verbose "IC Output: ${OPTARG}"
       COMPILER_OPTS+="-Dstc.ic.output-file=${OPTARG}"
       ;;
    d) DEBUG_PORT=${OPTARG}
      verbose "DEBUG_PORT: ${DEBUG_PORT}"
      ;;
    D)
      STC_ARGS+="-D${OPTARG}"
      verbose "MACRO: ${OPTARG}"
      ;;
    E) OUTPUT_MODE=cpp
      COMPILER_OPTS+="-Dstc.preprocess_only=true"
      ;;
    h)
      verbose "HELP:"
      help
      ;;
    I) STC_ARGS+="-I${OPTARG}"
       ;;
    i) IMPORT_STRINGS+="import ${OPTARG};"
       ;;
    j) JVM=${OPTARG}
      ;;
    L) LOGFILE=${OPTARG}
      verbose "LOGFILE: ${LOGFILE}"
      ;;
    p) PREPROCESS=false
      ;;
    r)
      add_rpath ${OPTARG}
      ;;
    f) verbose "TURNON: ${OPTARG}"
      enable_opt ${OPTARG}
      ;;
    F) verbose "TURNOFF: ${OPTARG}"
      disable_opt ${OPTARG}
      ;;
    o)
      OUTPUT=${OPTARG}
      ;;
    O)
       set_opt_level $OPTARG
      ;;
    u)
      CHECK_DEPS=1
      ;;
    U)
      CHECK_DEPS=1
      DEPS+=${OPTARG}
      ;;
    v)
      report_version
      ;;
    V)
      (( ++VERBOSE ))
      if (( VERBOSE == 2 )) { set -x }
      ;;
    x)
      print "Under construction"
      return ${EXIT_ERROR_SCRIPT}
      ;;
    *)
      # getopts already printed an error message
      print "Use 'stc -h' for help."
      return ${EXIT_ERROR_SCRIPT}
      ;;
  esac
done

shift $(( OPTIND-1 ))

# After shifting out the options we are left with the file names
if (( ${#*} >= 1 ))
then
  INPUT=$1
else
  print "No input file was specified!"
  print "Use 'stc -h' for help."
  return ${EXIT_ERROR_SCRIPT}
fi
if [[ ${#*} > 1 ]]
then
  # This is optional (STC Java implementation defaults to *.tic)
  # OUTPUT may have been set by stc -o
  OUTPUT=$2
fi

# Clear this in case the user has set it
unset DEBUG
if [[ ${DEBUG_PORT:-} != "" ]]
then
  export DEBUG=-agentlib:jdwp=transport=dt_socket,server=y,address=${DEBUG_PORT}
fi

lookup_java
if [[ ${JVM} == "unset" ]]
then
  print "Could not find java!"
  print "Put java in your PATH or use stc -j /path/to/java"
  exit 1
fi

STC=${STC_HOME}/lib/stc.jar
CLASSPATH="${STC}"
for lib in stc antlr-3.5-complete-no-st3 log4j-1.2.16 \
           commons-cli-1.2 commons-io-2.4 commons-lang3-3.3.2 \
           guava-18.0
do
  CLASSPATH+=":${STC_HOME}/lib/${lib}.jar"
done

TURBINE_VERSION=$( < ${STC_HOME}/etc/turbine-version.txt )

FLAGS=( -ea -Dstc.turbine.version=${TURBINE_VERSION} )
if [[ ${LOGFILE:-} != "" ]]
then
  FLAGS+="-Dstc.log.file=${LOGFILE}"
fi

if [[ ${STC_LOG_TRACE:-} = true ]]
then
  FLAGS+="-Dstc.log.trace=true"
fi

if [[ ${RPATH} != "" ]]
  then
  FLAGS+="-Dstc.rpath=${RPATH}"
fi

# Check stc is compiled
if [[ ! -f ${STC} ]]
then
    print "Compiled STC jar not found at path ${STC}."
    print "Did you forget to compile STC?"
    return ${EXIT_ERROR_SCRIPT}
fi

check_deps()
# If this function returns, we need to run the compiler
{
  verbose "Checking dependencies..."
  [[ ${OUTPUT} == "" ]] && OUTPUT=${INPUT%.swift}.tic
  verbose "Output file is: ${OUTPUT}"
  if [[ ! -f ${OUTPUT} ]]
  then
    verbose "Output file does not exist."
    return
  fi
  if [[ ${INPUT} -nt ${OUTPUT} ]]
  then
    verbose "Input file (${INPUT}) is newer than output (${OUTPUT})."
    return
  fi
  local DEP
  for DEP in ${DEPS}
  do
    if [[ ! -f ${DEP} ]]
    then
      print "stc: WARNING: Dependency -U ${DEP} does not exist!"
      continue
    fi
    if [[ ${DEP} -nt ${OUTPUT} ]]
    then
      verbose "Dependency file (${DEP}) is newer than output (${OUTPUT})."
      return
    fi
  done
  verbose "Output file is up to date - not compiling."
  exit 0
}

(( CHECK_DEPS )) && check_deps

# Extra info flags
FLAGS+=("-Dstc.stc_home=${STC_HOME}"
        "-Dstc.turbine_home=${TURBINE_TOP}"
        "-Dstc.c_preprocess=${PREPROCESS}" )

MAIN=exm.stc.ui.Main

JVM_FLAGS=()
# Increase stack size
JVM_FLAGS+="-Xss8m"
# Enable assertions
JVM_FLAGS+="-enableassertions"
# Include any from environment (overriding defaults)
JVM_FLAGS+=${=STC_JVM_FLAGS:-}

# Handle import strings (-i)
DELETE_INPUT=0
TMP_SWIFT=""
if (( ${#IMPORT_STRINGS} )) {
     TOKEN=$( basename ${INPUT} )
     TMP_SWIFT=$( make_temp swift /tmp ${TOKEN%.swift} )
     { print ${IMPORT_STRINGS}
       cat ${INPUT} } > ${TMP_SWIFT}
     verbose "created: ${TMP_SWIFT}"

     INPUT=${TMP_SWIFT}
     DELETE_INPUT=1
}

# Group all JVM args together
ARGS="${JVM_FLAGS} ${DEBUG:-} ${FLAGS} ${COMPILER_OPTS} -cp ${CLASSPATH}"
# Ensure output directory exists
mkdir -pv ${OUTPUT:h}

${JVM} ${=ARGS} ${MAIN} ${STC_ARGS} ${INPUT} ${OUTPUT}
# Return the exit code from the java process
EXITCODE=${?}

if (( DELETE_INPUT )) {
     verbose "Deleting: ${INPUT}"
     rm ${INPUT}
}

return ${EXITCODE}
