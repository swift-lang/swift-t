#!/usr/bin/env zsh
set -eu

# SWIFT-T
# Main user interface script

DEBIAN_BUILD=@DEBIAN_BUILD@ # Filled in by build.xml
if (( DEBIAN_BUILD ))
then
  STC_HOME=/usr
  STC_TOP=/usr/lib/stc
else
  STC_HOME=$( cd $( dirname $0 )/.. ; /bin/pwd )
  STC_TOP=${STC_HOME}
fi
source "${STC_TOP}/etc/stc-config.sh"
source "${STC_TOP}/bin/helpers.zsh"

STC=${STC_HOME}/bin/stc
TURBINE=${TURBINE_HOME}/bin/turbine

STC_OPTS=()
TURBINE_OPTS=()

usage()
{
  print "swift-t: Use 'swift-t -h' for help."
}

help()
{
  cat ${STC_HOME}/etc/help/swift-t-header.txt
  print
  printf "STC OPTIONS\n\n"
  # These options are available from SWIFT-T or STC:
  cat ${STC_HOME}/etc/help/options-1.txt
  print
  printf "TURBINE OPTIONS\n\n"
  cat ${TURBINE_TOP}/etc/help/options-1.txt
  print
  printf "SWIFT-T OPTIONS\n\n"
  printf "These options are available in the swift-t program but not stc.\n\n"
  cat ${STC_HOME}/etc/help/options-3.txt
  print
  printf "TURBINE PASSTHROUGH OPTIONS\n\n"
  printf "You must use the pass-through feature to access these options.\n\n"
  cat ${TURBINE_TOP}/etc/help/options-2.txt
  print
  cat ${TURBINE_TOP}/etc/help/env.txt
  print
  # These are details about compiler flag terms
  cat ${STC_HOME}/etc/help/option-terms.txt
  print
  print "TOOL USAGE"
  print
  print "You may want to run STC and Turbine individually."
  print "Use 'stc -h' to see STC help and optimization list"
  print "Use 'turbine -h' to see Turbine help"
  print
  cat ${STC_HOME}/etc/help/footer.txt
  print
  exit 0
}

report_version()
{
  ${STC} -v
  print
  ${TURBINE} -v
  exit 0
}

PROGRAM_TCL=""
CHECK_DEPS=0
STC_DEPS_ARGS=()
VERBOSE=0
EXEC_STRING=""
IMPORT_STRING=""

# Process all flags: split among this script, STC, or Turbine
SWIFT_T_CHARS="hE:o:t:vV"
STC_CHARS="A:C:d:D:f:F:I:i:j:L:O:pr:uU:"
TURBINE_CHARS="e:lm:M:n:s:xX"
CHARS=${SWIFT_T_CHARS}${STC_CHARS}${TURBINE_CHARS}
while getopts :${CHARS} OPTION
do
  # Note: We make heavy use of the rarely-used ;& in the following
  case ${OPTION} in

    # Swift/T arguments:
    E) EXEC_STRING+=${OPTARG} ;;
    h) help ; exit 0 ;;
    v) report_version ;;
    V) (( ++VERBOSE ))
       if (( VERBOSE == 2 )) ; then set -x ; fi ;;
    o) PROGRAM_TCL=${OPTARG} ;;

    # STC arguments:
    A) ;& d) ;& D) ;& F) ;& f) ;& I) ;& i) ;&
    j) ;& L) ;& O) ;& p) ;& r)
      STC_OPTS+=( -${OPTION} ${OPTARG} )
      ;;

    # STC deps arguments:
    u) ;& U)
      CHECK_DEPS=1
      STC_DEPS_ARGS+=( -${OPTION} ${OPTARG} )
      ;;

    # Turbine arguments
    e) ;& l) ;& m) ;& M) ;& n) ;& s) ;& x) ;& X)
      TURBINE_OPTS+=( -${OPTION} "${OPTARG}" )
      ;;

    # Turbine pass-through
    t)
      FLAG=${OPTARG%:*}
      ARG=
      if (( ${#OPTARG} > 1 ))
      then
        ARG=${OPTARG#*:}
      fi
      TURBINE_OPTS+=( -${FLAG} ${ARG} )
      ;;

    # Errors
    *)
      print "swift-t: invalid option: ${OPTARG}"
      usage
      exit 1
  esac
done
shift $(( OPTIND - 1 ))

(( VERBOSE >= 1 )) && STC_OPTS+="-V"
(( VERBOSE == 2 )) && TURBINE_OPTS+="-V"

# Print a message when we are verbose.
verbose()
{
  local T
  zparseopts -D -E t=T # Accept -t for TAB
  if (( VERBOSE ))
  then
    if (( ${#T} ))
    then
      printf "\t"
    fi
    printf "%s\n" "${*}"
  fi
}

# Print a command when we are verbose, then execute it
verbose_cmd()
{
  verbose -t ${*}
  ${*}
}

verbose "Swift/T"

DELETE_PROGRAM_SWIFT=0
EXEC_SWIFT=""
if [[ ${EXEC_STRING} == "" && ${IMPORT_STRING} == "" ]]
then
  # Normal program.swift to compile/run
  if [[ ${#*} == 0 ]]
  then
    usage
    return 1
  fi
  PROGRAM_SWIFT=$1
  shift
elif [[ ${EXEC_STRING} == "" ]]
  then
  # Create/compile/run/delete imports + program.swift
  PROGRAM_SWIFT=$( make_temp "swift" /tmp exec )
  verbose "Writing: ${PROGRAM_SWIFT}"
  echo ${IMPORT_STRING} >  ${PROGRAM_SWIFT}
  cat $1                >> ${PROGRAM_SWIFT}
  shift
  DELETE_PROGRAM_SWIFT=1
else
  # Create/compile/run/delete -E string
  PROGRAM_SWIFT=$( make_temp "swift" /tmp exec )
  verbose "Writing: ${PROGRAM_SWIFT}"
  echo ${IMPORT_STRING} ${EXEC_STRING} >> ${PROGRAM_SWIFT}
  DELETE_PROGRAM_SWIFT=1
fi
ARGS=( ${*} )

if [[ ! -r ${PROGRAM_SWIFT} ]]
then
  print "Could not read: ${PROGRAM_SWIFT}"
  exit 1
fi

make_stc_output()
# If the user did not provide an output file, we make one
{
  if [[ ${PROGRAM_TCL} == "" ]]
  then
    PROGRAM_DIR=${PROGRAM_SWIFT:h}  # ZSH dirname
    PROGRAM_FILE=${PROGRAM_SWIFT:t} # ZSH basename
    NAME=${PROGRAM_FILE%.swift}
    PROGRAM_TCL=$( make_temp "tic" ${PROGRAM_DIR} ${NAME} )
    DELETE_PROGRAM_TCL=1 # Delete this temporary file later
    CHECK_DEPS=0 # We just made a stub file, it is not up-to-date!
  fi
}

# Set up output and deps arguments
DELETE_PROGRAM_TCL=0 # Do not delete this by default
make_stc_output
if (( CHECK_DEPS ))
then
  STC_OPTS+=( ${STC_DEPS_ARGS} )
fi

if (( ! SKIP_COMPILE ))
then
  # Run STC
  make_stc_output
  verbose "Compiling: ${PROGRAM_SWIFT}"
  verbose "       to: ${PROGRAM_TCL}"
  verbose_cmd ${STC} ${STC_OPTS} ${PROGRAM_SWIFT} ${PROGRAM_TCL}
  if [[ ${SWIFT_T_SYNC:-} == 1 ]]
  then
    sync
  fi
fi

# Run Turbine
EXITCODE=0
verbose "Running:   ${PROGRAM_TCL}"
verbose_cmd ${TURBINE} ${TURBINE_OPTS} ${PROGRAM_TCL} ${ARGS} || \
  EXITCODE=1

# Clean up
if (( DELETE_PROGRAM_TCL ))
then
  verbose "Removing: ${PROGRAM_TCL}"
  rm ${PROGRAM_TCL}
fi

if (( DELETE_PROGRAM_SWIFT ))
then
  verbose "Removing: ${PROGRAM_SWIFT}"
  rm ${PROGRAM_SWIFT}
fi

return ${EXITCODE}
