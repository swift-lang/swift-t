
////

Swift/T Gallery, asciidoc format
http://swift-lang.github.io/swift-t/gallery.html

NOTE: Edit gallery.txt.m4, not gallery.txt (which is overwritten)

////

:toc:
:numbered:

////
Settings:
////
:miscellaneous.newline: \n

= Swift/T Gallery

This page demonstrates the ease of use of Swift/T when constructing
common application patterns.

Links:

* http://swift-lang.github.io/swift-t/guide.html[General documentation for Swift/T]

* Post to https://groups.google.com/forum/#!forum/swift-t-user[the Swift/T
  user list] with questions about these examples.

* These example scripts may be link:downloads/gallery.tar.gz[downloaded
  here] (2KB).

== Hello world

EXAMPLE(hello-world/hello-world.swift)

== Swift/T for shell users

Swift/T has a powerful shell interface in its
http://swift-lang.github.io/swift-t/guide.html#app_functions[app function] syntax.  Here are some
advanced examples:

To pass a whole command line into a generic app function, use:

EXAMPLE(sh-c/sh-1.swift)

producing:
----
this is my message
----

Programs that are found in different locations on different machines
can be accessed like this:

EXAMPLE(sh-c/sh-2.swift)

You can put the "program configuration" section in a separate file and
http://swift-lang.github.io/swift-t/guide.html#modules[+import+] it.

If you prefer, you could also put separate definitions of +program+ in
separate files and http://swift-lang.github.io/swift-t/guide.html#cpp_macro[conditionally +#include+]
them with STC support for the http://swift-lang.github.io/swift-t/guide.html#cpp[C preprocessor].

This script converts itself to octal in +mtc.octal+.

EXAMPLE(mtc/mtc1.swift)

This script splits itself into lines, where line _i_ is in file +out-+
_i_ +.txt+

EXAMPLE(mtc/mtc2.swift)

Note that each +/bin/echo+ is eligible to run concurrently.  See
http://swift-lang.github.io/swift-t/guide.html#_invocation[Invocation] for how to run with many
processes.

== Swift/T for cluster users

It's easy to launch these kinds of workloads on a cluster.

If using a plain host list:

EXAMPLE(mtc/hosts.txt)

Just run with:

----
stc mtc1.swift
turbine -f hosts.txt -n 4 mtc1.tic
----

As shown, +turbine+ accepts an MPI hosts file and number of
processes, just like +mpiexec+.

A shorter, equivalent form of that command sequence is:

----
swift-t -t f:hosts.txt -n 4 mtc1.swift
----

On a PBS system, run with:

----
swift-t -m pbs -n 4 mtc1.swift
----

Many link:http://swift-lang.github.io/swift-t/sites.html[other systems]
are supported!

== Swift/T for MapReduce users

A simplified version of the MapReduce model is to just compute many
things and assemble them together at the end.

This script splits itself into lines, then reassembles the original
script.

EXAMPLE(mtc/mtc3.swift)

Note that leading whitespace is trimmed by +file_lines()+, and +cat()+
is part of the Swift/T standard library in module +unix+.

== Swift/T for recursive algorithms

=== Fibonacci

This script computes the given
link:https://en.wikipedia.org/wiki/Fibonacci_number[Fibonacci number]:

EXAMPLE(fib/fib.swift)

Run it as:

EXAMPLE(fib/run.sh)

Each recursive call to +fib()+ is spawned as a concurrent task.

The +sys+ module provides the +argv()+ function, which provides a
handy key/value interface for input values.

=== Merge sort

This script implements a parallel
link:https://en.wikipedia.org/wiki/Merge_sort[merge sort].  The data
files are generated by

----
tclsh make-data.tcl
----

Each of the 8 files is already sorted, and a merged result will be
placed in +sorted.txt+.

EXAMPLE(merge-sort/merge.swift)

This code runs the +sort+ invocations concurrently, limited only by
available processors and data dependencies.

== Swift/T for Python and Numpy users

Swift/T can run Python as an ordinary external program or via a
bundled interpreter!  You can load Python packages, including
Python-wrapped native code- just set +PYTHONPATH+ and +import+ what
you need.

See this section for information about calling Python or Numpy:
http://swift-lang.github.io/swift-t/guide.html#_external_scripting_support[Swift/T Guide: Python]

[[swift_tcl]]
== Swift/T for Tcl users

Swift/T is a great way to parallelize Tcl applications.  You can run
+tclsh+ as an ordinary external program, or use the bundled Tcl
interpreter!  (Swift/T always has a Tcl interpreter for basic
operation.)  You can load Tcl packages, including Tcl-wrapped native
code- just set +SWIFT_PATH+ and +package require+ what you need.

EXAMPLE(swift-tcl/tcl.swift)

Run this with:
----
swift-t -p gallery/swift-tcl/tcl.swift
----
(+swift-t -p+ turns off the C preprocessor and allows the triple-quote
syntax.)

It outputs:
----
o should be: 7
tcl: o=7
o is: 7
----

The +@dispatch=WORKER+ annotation allows +add()+ to run on any worker
process in the run.  Multiple +add()+ s, or other functions, can run
concurrently.  Swift automatically maintains ordering by managing data
dependencies from function outputs to inputs.

== Static executables

This section demonstrates a complete, concrete example of the optional
http://swift-lang.github.io/swift-t/guide.html#mkstatic[static executable] feature.  First, compose a
Swift script.

EXAMPLE(static-exec/hello.swift)

Then, copy Turbine's example manifest file and edit.
This manifest has all comments removed for simplicity.

EXAMPLE(static-exec/hello.manifest)

Then, build:

EXAMPLE(static-exec/build.sh)

////
Local Variables:
mode: doc
eval: (auto-fill-mode 1)
End:
////
